// Generated by CoffeeScript 1.7.1
module.exports.combiner = function() {
  var async, feed, rss, urls, _;
  async = require('async');
  feed = require('feed-read');
  _ = require('underscore');
  rss = (require('./rss')).rss();
  urls = [];
  return {
    deleteAll: function() {
      urls = new Array();
      return rss.init();
    },
    add: function(req, callback) {
      if (_.isString(req)) {
        urls.push(req);
        if (callback != null) {
          return callback(urls);
        }
      } else if (_.isArray(req)) {
        return async.forEach(req, function(val, cb) {
          urls.push(val);
          return cb();
        }, function() {
          if (callback != null) {
            return callback(_.uniq(urls));
          }
        });
      }
    },
    del: function(req, callback) {
      if (_.isString(req)) {
        urls = _.reject(urls, function(iterator_url) {
          return iterator_url === req;
        });
        if (callback != null) {
          return callback(urls);
        }
      } else if (_.isArray(req)) {
        return async.forEach(req, function(val, cb) {
          urls = _.reject(urls, function(iterator_url) {
            return iterator_url === val;
          });
          return cb();
        }, function() {
          if (callback != null) {
            return callback(urls);
          }
        });
      }
    },
    combine: function(callback) {
      rss.init();
      return async.forEach(urls, (function(_this) {
        return function(url, cb) {
          return feed(url, function(err, articles) {
            var _ref;
            if (err) {
              return cb();
            }
            (_ref = rss.articles).push.apply(_ref, articles);
            return cb();
          });
        };
      })(this), (function(_this) {
        return function() {
          rss.articles = _.sortBy(_.uniq(rss.articles), function(article) {
            return article.published.getTime();
          });
          rss.articles.reverse();
          if (callback != null) {
            return callback(rss);
          }
        };
      })(this));
    },
    crawl: function(callback) {
      return this.combine(callback);
    },
    geturls: function() {
      return urls;
    },
    rss: function() {
      return rss;
    }
  };
};
